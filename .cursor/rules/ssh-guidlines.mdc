---
alwaysApply: false
---
## SSH Remote Development (Windows ↔ Windows)

This rule standardizes how to enable SSH on the Windows workstation (Darkin-PC) and connect from the laptop (Ragnar) using Cursor Remote-SSH. Commands are PowerShell-friendly and non-interactive.

### Summary
- Server: Darkin-PC (Windows 11). Use elevated PowerShell.
- Client: Ragnar (Windows). Use PowerShell.
- Goal: SSH to Darkin-PC and open `D:\Git-Hub_Local\Annika_2.0` in Cursor.

---

## 1) Server Setup (Darkin-PC — Elevated PowerShell)

1. Install and enable OpenSSH Server
```powershell
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
Start-Service sshd
Set-Service -Name sshd -StartupType Automatic
Start-Service ssh-agent
Set-Service -Name ssh-agent -StartupType Automatic
```

2. Allow SSH through the firewall (all profiles, any remote IP)
```powershell
if (Get-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -ErrorAction SilentlyContinue) {
  Set-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -Enabled True -Profile Any
} else {
  New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (SSH)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 | Out-Null
  Set-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -Profile Any
}
# Optional explicit allow for Teleport/split-tunnel subnet
netsh advfirewall firewall add rule name="Allow Teleport SSH" dir=in action=allow protocol=TCP localport=22 remoteip=192.168.2.0/24 profile=any
```

3. Ensure sshd_config enables auth/forwarding (optional but recommended)
```powershell
$cfg='C:\ProgramData\ssh\sshd_config'
if (Test-Path $cfg) {
  $content = Get-Content $cfg -Raw
  $settings = @{Port='22';PasswordAuthentication='yes';PubkeyAuthentication='yes';AllowTcpForwarding='yes';AllowAgentForwarding='yes'}
  foreach($k in $settings.Keys){
    $v=$settings[$k]
    $pat = "(?m)^[#\s]*$k\s+\S+\s*$"
    if ($content -match $pat) { $content = [regex]::Replace($content,$pat,"$k $v") }
    else { $content = $content.TrimEnd() + "`r`n$k $v`r`n" }
  }
  Set-Content -Path $cfg -Value $content -Encoding ascii
  Restart-Service sshd
}
```

4. Verify listener and firewall
```powershell
Get-Service sshd,ssh-agent
Get-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' | Select-Object Name,Enabled,Profile
Get-NetTCPConnection -State Listen -LocalPort 22 | Format-Table -Auto
```

---

## 2) Key-Based Authentication (Windows specifics)

Windows OpenSSH enforces strict file permissions. Use both locations when the SSH login user is a member of Administrators:

- Per-user keys: `C:\Users\<User>\.ssh\authorized_keys`
- Admin group keys: `C:\ProgramData\ssh\administrators_authorized_keys`

Install a public key for the target Windows user (run as that user or elevated specifying the user path):
```powershell
$pub = Get-Content $env:USERPROFILE\.ssh\annika_ed25519.pub -Raw  # or paste literal key string

# Per-user authorized_keys
$ssh  = Join-Path $env:USERPROFILE '.ssh'
$auth = Join-Path $ssh 'authorized_keys'
New-Item -ItemType Directory -Force -Path $ssh | Out-Null
Set-Content -Path $auth -Value $pub -Encoding ascii

# Lock down ACLs (required)
icacls $ssh  /inheritance:r | Out-Null
icacls $ssh  /grant:r "$env:USERNAME:(OI)(CI)(F)" "SYSTEM:(OI)(CI)(F)" "Administrators:(OI)(CI)(F)" | Out-Null
icacls $auth /inheritance:r | Out-Null
icacls $auth /grant:r  "$env:USERNAME:(R)" "SYSTEM:(F)" "Administrators:(F)" | Out-Null

# Admins file (if user is in Administrators group)
$adminKeys = 'C:\ProgramData\ssh\administrators_authorized_keys'
Set-Content -Path $adminKeys -Value $pub -Encoding ascii
icacls $adminKeys /inheritance:r | Out-Null
icacls $adminKeys /grant:r "Administrators:(F)" "SYSTEM:(F)" | Out-Null

Restart-Service sshd
```

Azure AD usernames may require special forms at login:
- "AzureAD\\<UPN>" (example: `AzureAD\joshua@koviakbuilt.com`)
- `<UPN>` (example: `joshua@koviakbuilt.com`)
- "AzureAD\\<LocalProfileName>" (example: `AzureAD\JoshuaKoviak`)

---

## 3) Client Setup (Ragnar — PowerShell)

1. Create a keypair (use a passphrase if desired)
```powershell
ssh-keygen -t ed25519 -C "cursor-remote" -f $env:USERPROFILE\.ssh\annika_ed25519 -N ""
```

2. Push the public key to Darkin-PC (non-interactive option)
```powershell
type $env:USERPROFILE\.ssh\annika_ed25519.pub | ssh "AzureAD\joshua@koviakbuilt.com"@192.168.0.35 "powershell -NoProfile -Command ^
  \"$p=$env:USERPROFILE+'\\.ssh\\authorized_keys'; ^
     New-Item -ItemType Directory -Force $env:USERPROFILE+'\\.ssh' | Out-Null; ^
     if(-not (Test-Path $p)){New-Item -ItemType File -Force $p | Out-Null}; ^
     $in=[Console]::In.ReadToEnd(); ^
     if(-not ($in.Trim().Length -eq 0)){Add-Content -Path $p -Value $in -Encoding ascii}; ^
     icacls $p /inheritance:r | Out-Null; ^
     icacls $p /grant $env:USERNAME':(R)' 'SYSTEM:(F)' 'Administrators:(F)' | Out-Null\""
```

3. Add an SSH config alias
```powershell
@"
Host Darkin-PC
  HostName 192.168.0.35
  User AzureAD\joshua@koviakbuilt.com
  Port 22
  IdentityFile ~/.ssh/annika_ed25519
  ServerAliveInterval 30
  ServerAliveCountMax 3
"@ | Out-File -FilePath $env:USERPROFILE\.ssh\config -Encoding ascii -Append
```

4. First connection (accept host key)
```powershell
ssh Darkin-PC
exit
```

5. Open the repo in Cursor Remote-SSH
```powershell
cursor --folder-uri "vscode-remote://ssh-remote+Darkin-PC/D:/Git-Hub_Local/Annika_2.0"
```

---

## 4) Networking Notes (when TCP:22 fails but ping works)

Symptoms: `Test-NetConnection` shows `SourceAddress 192.168.2.x` on interface `utun` (VPN/tunnel) while Darkin-PC is `192.168.0.35`. Many VPNs block or hairpin TCP:22.

Fix options on Ragnar:
- Connect to the same LAN/subnet as Darkin-PC (obtain a 192.168.0.x address) and retry.
- Enable split tunneling so `192.168.0.0/24` uses the Wi‑Fi/LAN, not the VPN.
- Add a persistent route for the LAN via your Wi‑Fi gateway:
```powershell
$gw = (Get-NetIPConfiguration -InterfaceAlias 'Wi-Fi').IPv4DefaultGateway.NextHop
route -p add 192.168.0.0 mask 255.255.255.0 $gw
```

Server checks on Darkin-PC:
```powershell
Get-NetConnectionProfile | Select-Object InterfaceAlias,NetworkCategory,IPv4Connectivity
Get-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' | Select-Object Name,Enabled,Profile
Get-NetTCPConnection -State Listen -LocalPort 22 | Select-Object LocalAddress,LocalPort,State,OwningProcess
```

---

## 5) Troubleshooting

Client-side (Ragnar):
```powershell
Test-NetConnection 192.168.0.35 -Port 22 -InformationLevel Detailed
tracert -d 192.168.0.35
ssh -vvv -o ConnectTimeout=5 "AzureAD\joshua@koviakbuilt.com"@192.168.0.35
```

Server-side (Darkin-PC):
```powershell
# Verify listener and process
Get-NetTCPConnection -State Listen -LocalPort 22 | Select-Object LocalAddress,State,OwningProcess

# Quick check of sshd_config settings
Select-String -Path 'C:\ProgramData\ssh\sshd_config' -Pattern '^(?i)\s*(Port|ListenAddress|PasswordAuthentication|PubkeyAuthentication|AllowTcpForwarding|AllowAgentForwarding)\b' -AllMatches | ForEach-Object { $_.Line }

# Firewall rule profile & remote address
Get-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' | Select-Object Name,Enabled,Profile | Format-Table -Auto
Get-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' | Get-NetFirewallAddressFilter | Select-Object RemoteAddress

# Inbound Block rules on port 22
Get-NetFirewallRule -Action Block -Direction Inbound -Enabled True | Get-NetFirewallPortFilter | Where-Object { $_.Protocol -eq 6 -and $_.LocalPort -eq 22 }

# OpenSSH server logs
Get-WinEvent -LogName 'OpenSSH/Operational' -MaxEvents 100 | Select-Object TimeCreated,Id,LevelDisplayName,Message
```

If the SSH login user is in Administrators and key auth still fails, ensure the key also exists in `C:\ProgramData\ssh\administrators_authorized_keys` with ACLs limited to `Administrators` and `SYSTEM` only.

---

## 6) Reference
- Windows OpenSSH docs: `C:\ProgramData\ssh\sshd_config` (file on server)
- Cursor Remote-SSH folder URI format:
```text
vscode-remote://ssh-remote+<HostAlias>/<DriveLetter>:/<path>
```

---

## 7) Non-interactive Terminal Practices and Wrappers (Ragnar hints)

Use these to ensure reliable, non-interactive diagnostics and automation from either machine.

- PowerShell baseline (local or when invoking remotely):
  - `-NoProfile -NonInteractive -ExecutionPolicy Bypass -ErrorAction Stop`
  - Disable progress UI: `$ProgressPreference = 'SilentlyContinue'`
  - Unify output: append `2>&1 | Out-String` to capture errors and avoid paging

Example structure:
```powershell
pwsh -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command "
  $ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';
  <your commands here> 2>&1 | Out-String | Write-Output
"
```

- Job timeout wrapper for long commands:
```powershell
function Invoke-WithTimeout {
  param(
    [Parameter(Mandatory)] [string]$Script,
    [int]$Seconds = 10
  )
  $job = Start-Job -ScriptBlock ([ScriptBlock]::Create($Script))
  try {
    if (Wait-Job $job -Timeout $Seconds) {
      Receive-Job $job -Keep 2>&1 | Out-String
    } else {
      Stop-Job $job -Force; Remove-Job $job -Force
      throw "Timeout after $Seconds seconds"
    }
  } finally {
    if ($job) { Remove-Job $job -Force -ErrorAction SilentlyContinue }
  }
}

# Example: 7s timeout on reachability test
Invoke-WithTimeout -Script "Test-NetConnection 192.168.0.35 -Port 22 -InformationLevel Detailed | Out-String" -Seconds 7
```

- Key-only SSH probe (no prompts):
```powershell
ssh `
  -o BatchMode=yes `
  -o ConnectTimeout=7 `
  -o ServerAliveInterval=5 `
  -o ServerAliveCountMax=2 `
  -o StrictHostKeyChecking=no `
  -o PreferredAuthentications=publickey `
  -o PasswordAuthentication=no `
  -i $env:USERPROFILE\.ssh\annika_ed25519 `
  "AzureAD\joshua@koviakbuilt.com"@192.168.0.35 exit 2>&1
```

- Paging/wait avoidance:
  - Prefer `| Out-String` or format to string; avoid interactive prompts
  - For commands that page by default, force plain output or redirect to file/stdout

Operational guideline: run checks in this order and proceed only on clean results—reachability → SSH probe → remote command. If a step times out or fails, immediately move to the next diagnostic (route, firewall, logs) using the wrappers above.

