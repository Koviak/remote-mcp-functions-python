---
alwaysApply: true
description: Global scope and architecture for Remote MCP Functions (Python) with Microsoft Graph, Redis-first design, webhook-driven Planner sync, and HTTP/MCP endpoints.
---

### Remote MCP Functions + Microsoft Graph — Global Overview

This repository implements a production-ready remote MCP (Model Context Protocol) server on Azure Functions that enables autonomous agents to interact with Microsoft 365 (Graph) using a Redis-first architecture and a webhook-driven bidirectional sync with Microsoft Planner. Use this rule as the authoritative, code-verified overview.

- **Architecture diagram**: [architecture-diagram.png](mdc:architecture-diagram.png)
- **Primary docs**: [README.md](mdc:README.md), [CONSOLIDATED_DOCUMENTATION.md](mdc:CONSOLIDATED_DOCUMENTATION.md)

### Core Components (verified)
- **Azure Function App**: registers MCP tools and HTTP endpoints, readiness probe, and service bootstrap hooks
  - File: [src/function_app.py](mdc:src/function_app.py)
  - Exposes readiness `GET /api/health/ready`
  - Registers MCP tools (`hello_mcp`, `get_snippet`, `save_snippet`) and additional tools
  - Registers HTTP endpoints via helpers below
- **HTTP Endpoints aggregation**: Graph wrappers and agent endpoints (calendars, events, planner, metadata, webhook handler, etc.)
  - File: [src/http_endpoints.py](mdc:src/http_endpoints.py)
  - Verified routes in code:
    - `POST /api/graph_webhook` (Graph webhooks ingress)
    - `GET /api/metadata` (cached metadata access via query params)
    - `POST /api/agent/tasks` (create agent task)
    - `POST /api/planner/poll` (trigger immediate Planner poll)
    - Numerous Microsoft Graph wrappers (e.g., calendars/events and Planner task board formats)
- **Webhook-driven Planner Sync (V5)**: real-time sync using Microsoft Graph webhooks with fallback polling
  - File: [src/planner_sync_service_v5.py](mdc:src/planner_sync_service_v5.py)
  - Features: webhook adoption/renewal/cleanup, ID mapping, ETag tracking, conflict resolution, rate limiting, batching, health metrics
- **Graph Webhook Handler**: validates, routes, and logs Graph notifications via Redis pub/sub
  - File: [src/webhook_handler.py](mdc:src/webhook_handler.py)
- **Teams Chat Subscriptions Manager**: creates/renews global chat message subscriptions (`/me/chats/getAllMessages`)
  - File: [src/chat_subscription_manager.py](mdc:src/chat_subscription_manager.py)
- **Graph Metadata Manager**: cache-first access for users/groups/plans/buckets/tasks with Redis TTLs
  - File: [src/graph_metadata_manager.py](mdc:src/graph_metadata_manager.py)
- **Token API Endpoints**: health, list tokens, fetch token by scope, trigger refresh
  - File: [src/token_api_endpoints.py](mdc:src/token_api_endpoints.py)
  - Verified routes in code:
    - `GET /api/tokens/health`
    - `GET /api/tokens` (list active token metadata)
    - `GET /api/tokens/{scope}` (optionally `?user_id=`)
    - `POST /api/tokens/refresh/{scope}`
- **Startup Orchestrator (local dev)**: starts ngrok, Azure Functions host, configures webhooks, initializes chat subscriptions, waits for tokens, runs V5 sync
  - File: [src/start_all_services.py](mdc:src/start_all_services.py)
- **Authentication & Tokens**:
  - Agent ROPC tokens and refresh: [src/agent_auth_manager.py](mdc:src/agent_auth_manager.py), [src/token_refresh_service.py](mdc:src/token_refresh_service.py)
  - Delegated/app tokens utilities: [src/dual_auth_manager.py](mdc:src/dual_auth_manager.py)
  - Redis token manager: [src/mcp_redis_config.py](mdc:src/mcp_redis_config.py)
- **MCP tools**: additional app-only and delegated tools
  - Files: [src/additional_tools.py](mdc:src/additional_tools.py), [src/additional_tools_delegated.py](mdc:src/additional_tools_delegated.py)
- **Task format adapter** (Annika ↔ Planner): [src/annika_task_adapter.py](mdc:src/annika_task_adapter.py)

### Data Flow (authoritative)
- Agents operate against Redis for read/write; no direct Graph calls from agents during normal operation
- Redis publishes real-time changes; webhook handler ingests Graph events and routes to sync service
- Planner Sync V5 performs:
  - Event-driven uploads (Redis → Planner) on Annika changes via pub/sub
  - Webhook-driven downloads (Planner → Redis) with periodic fallback polling

### Redis Keys and Channels (verified examples)
- Planner sync
  - Mappings: `annika:planner:id_map:{annika_or_planner_id}`
  - ETags: `annika:planner:etag:{planner_id}`
  - Logs and queues: `annika:sync:log`, `annika:sync:pending`, `annika:sync:failed`
  - Webhook status: `annika:sync:webhook_status`
  - Health: `annika:sync:health`
- Metadata cache
  - Users: `annika:graph:users:{user_id}` (24h TTL)
  - Groups: `annika:graph:groups:{group_id}` (24h TTL)
  - Plans: `annika:graph:plans:{plan_id}` (24h TTL)
  - Buckets: `annika:graph:buckets:{bucket_id}` (24h TTL)
  - Tasks: `annika:graph:tasks:{task_id}` (persist)
- Pub/Sub channels
  - Planner webhook bus: `annika:planner:webhook`
  - Task updates: `annika:tasks:updates`
  - Teams feeds: `annika:teams:chat_messages`, `annika:teams:chats`, `annika:teams:channel_messages`, `annika:teams:channels`
- State document (RedisJSON): `annika:conscious_state`
- Webhook logs: `annika:webhook:log`, `annika:webhooks:notifications`
- Chat subscriptions: `annika:chat_subscriptions:*`

### HTTP Endpoints (selected, verified)
- Health/readiness
  - `GET /api/health/ready` (lightweight readiness)
- Webhooks ingress
  - `POST /api/graph_webhook` (Azure Functions route; Graph validation handled in code)
- Agent and sync controls
  - `GET /api/metadata?type={user|group|plan|task}&id={id}`
  - `POST /api/agent/tasks`
  - `POST /api/planner/poll`
- Token service
  - `GET /api/tokens/health`, `GET /api/tokens`, `GET /api/tokens/{scope}`, `POST /api/tokens/refresh/{scope}`
- Note: `src/http_endpoints.py` additionally defines extensive Graph wrappers (calendars, events, planner board formats, and more) registered with `app.route(...)`.

### MCP Server Interface (SSE)
- Local SSE endpoint: `http://0.0.0.0:7071/runtime/webhooks/mcp/sse`
- Remote requires system key header (see [README.md](mdc:README.md) for `x-functions-key` usage)
- MCP tools in [src/function_app.py](mdc:src/function_app.py) and extended via [src/additional_tools.py](mdc:src/additional_tools.py)

### Configuration (validated sources)
- Environment variables resolved via `.env` and `local.settings.json`; loaded early by [src/load_env.py](mdc:src/load_env.py) and startup scripts
- Common vars: `AZURE_CLIENT_ID`, `AZURE_CLIENT_SECRET`, `AZURE_TENANT_ID`, `AGENT_USER_NAME`, `AGENT_PASSWORD`, `DEFAULT_PLANNER_PLAN_ID`, `REDIS_HOST`, `REDIS_PORT`, `REDIS_PASSWORD`, `GRAPH_WEBHOOK_URL`
- ngrok usage and domain are managed dynamically in [src/start_all_services.py](mdc:src/start_all_services.py)

### Authentication Modes (as implemented)
- MCP tools: app-only (`ClientSecretCredential`) for Graph
- HTTP endpoints: delegated or app-only; On-Behalf-Of is shown for HTTP triggers only (MCP triggers cannot access headers)
- Token storage/refresh in Redis via token refresh service

### Local Development and Operations
- Start everything (local): `python src/start_all_services.py` (or start Function host with `func start` from `src`)
- Webhook domain is set dynamically (ngrok) and pushed into `GRAPH_WEBHOOK_URL`
- Sync V5 starts once tokens are verified; health and logs are stored in Redis

### Additional Documentation (reference)
- Webhooks integration summary: [src/Documentation/MS_Graph_Webhook_Integration_COMPLETE.md](mdc:src/Documentation/MS_Graph_Webhook_Integration_COMPLETE.md)
- Redis-first architecture notes: [src/Documentation/Redis_First_Architecture_Summary.md](mdc:src/Documentation/Redis_First_Architecture_Summary.md)
- Planner sync details: [src/Documentation/Planner_Agent_Task_Creation_Guide.md](mdc:src/Documentation/Planner_Agent_Task_Creation_Guide.md)

### Ground Rules for Agents and Contributors (enforced by code/design)
- Prefer Redis-first access; avoid direct Graph calls from agents where Redis abstractions exist
- Use webhook-driven flows with fallback polling instead of high-frequency polling
- Keep endpoints idempotent and rate-limit aware; respect ETags and conflict resolution
- Do not hard-code absolute paths; use environment-driven or repo-local discovery
- Use function-level auth for internal endpoints; webhook ingress is anonymous by design

If you need specifics, open the linked files above directly. This rule is kept concise and points to the exact, verified sources in the repo.