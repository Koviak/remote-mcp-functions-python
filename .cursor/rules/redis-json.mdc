---
description: "TIER 2 - RedisJSON Operations: Programmatic guide for RedisJSON operations including storing, retrieving, updating, and searching JSON data. Use after understanding connection patterns (redis-master-manager.mdc) and key patterns (redis-component-keys-map.mdc)."
alwaysApply: false
---
# RedisJSON Documentation and Implementation Guide

## 🎯 WHEN TO USE THIS FILE
- When working with JSON data in Redis
- When you need to update specific fields without rewriting entire objects
- When implementing structured data storage
- For JSON path syntax and operations
- When using OpenAI structured outputs with Redis

## 📚 FILE HIERARCHY
- **Prerequisites**: 
  1. [redis-master-manager.mdc](mdc:.cursor/rules/redis-master-manager.mdc) - Learn HOW to connect
  2. [redis-component-keys-map.mdc](mdc:.cursor/rules/redis-component-keys-map.mdc) - Learn WHAT keys exist
- **This File**: Learn RedisJSON-specific operations
- **Related**: [redis-cli.mdc](mdc:.cursor/rules/redis-cli.mdc) - For manual RedisJSON CLI commands

## 🔗 KEY INTEGRATION POINTS
- **OpenAI Structured Outputs** → RedisJSON (compatible, no conversion needed)
- **Consciousness State**: Uses RedisJSON for all component storage
- **Task Storage**: Uses RedisJSON for complex task structures
- **Unified Task Schema**: Compatible with RedisJSON storage

> Enforcement: This repository REQUIRES RedisJSON for all persisted application data. Avoid plain `SET`/`GET` for JSON blobs. Strings are restricted to pub/sub payloads and ephemeral counters/locks.

> **Related Rules**: See [redis-component-keys-map.mdc](mdc:.cursor/rules/redis-component-keys-map.mdc) for key patterns, [redis-cli.mdc](mdc:.cursor/rules/redis-cli.mdc) for CLI operations, [redis-master-manager.mdc](mdc:.cursor/rules/redis-master-manager.mdc) for client setup

---

## RedisJSON Support for Redis

Discord Github

The JSON capability of Redis Stack provides JavaScript Object Notation (JSON) support for Redis. It lets you store, update, and retrieve JSON values in a Redis database, similar to any other Redis data type. Redis JSON also works seamlessly with the Redis Query Engine to let you index and query JSON documents.
Primary features

    Full support for the JSON standard
    A JSONPath syntax for selecting/updating elements inside documents (see JSONPath syntax)
    Documents stored as binary data in a tree structure, allowing fast access to sub-elements
    Typed atomic operations for all JSON value types

Use Redis with JSON

The first JSON command to try is JSON.SET, which sets a Redis key with a JSON value. JSON.SET accepts all JSON value types. This example creates a JSON string:
>_ Redis CLI
Python

res1 = r.json().set("bike", "$", '"Hyperion"')
print(res1)  # >>> True

res2 = r.json().get("bike", "$")
print(res2)  # >>> ['"Hyperion"']

res3 = r.json().type("bike", "$")
print(res3)  # >>> ['string']

Node.js
Java-Sync
Go
C#

Note how the commands include the dollar sign character $. This is the path to the value in the JSON document (in this case it just means the root).

Here are a few more string operations. JSON.STRLEN tells you the length of the string, and you can append another string to it with JSON.STRAPPEND.
>_ Redis CLI
Python

res4 = r.json().strlen("bike", "$")
print(res4)  # >>> [10]

res5 = r.json().strappend("bike", '" (Enduro bikes)"')
print(res5)  # >>> 27

res6 = r.json().get("bike", "$")
print(res6)  # >>> ['"Hyperion"" (Enduro bikes)"']

Node.js
Java-Sync
Go
C#

Numbers can be incremented and multiplied:
>_ Redis CLI
Python

res7 = r.json().set("crashes", "$", 0)
print(res7)  # >>> True

res8 = r.json().numincrby("crashes", "$", 1)
print(res8)  # >>> [1]

res9 = r.json().numincrby("crashes", "$", 1.5)
print(res9)  # >>> [2.5]

res10 = r.json().numincrby("crashes", "$", -0.75)
print(res10)  # >>> [1.75]

Node.js
Java-Sync
Go
C#

Here's a more interesting example that includes JSON arrays and objects:
>_ Redis CLI
Python

res11 = r.json().set("newbike", "$", ["Deimos", {"crashes": 0}, None])
print(res11)  # >>> True

res12 = r.json().get("newbike", "$")
print(res12)  # >>> ['["Deimos", { "crashes": 0 }, null]']

res13 = r.json().get("newbike", "$[1].crashes")
print(res13)  # >>> ['0']

res14 = r.json().delete("newbike", "$.[-1]")
print(res14)  # >>> [1]

res15 = r.json().get("newbike", "$")
print(res15)  # >>> [['Deimos', {'crashes': 0}]]

Node.js
Java-Sync
Go
C#

The JSON.DEL command deletes any JSON value you specify with the path parameter.

You can manipulate arrays with a dedicated subset of JSON commands:
>_ Redis CLI
Python

res16 = r.json().set("riders", "$", [])
print(res16)  # >>> True

res17 = r.json().arrappend("riders", "$", "Norem")
print(res17)  # >>> [1]

res18 = r.json().get("riders", "$")
print(res18)  # >>> [['Norem']]

res19 = r.json().arrinsert("riders", "$", 1, "Prickett", "Royce", "Castilla")
print(res19)  # >>> [4]

res20 = r.json().get("riders", "$")
print(res20)  # >>> [['Norem', 'Prickett', 'Royce', 'Castilla']]

res21 = r.json().arrtrim("riders", "$", 1, 1)
print(res21)  # >>> [1]

res22 = r.json().get("riders", "$")
print(res22)  # >>> [['Prickett']]

res23 = r.json().arrpop("riders", "$")
print(res23)  # >>> ['"Prickett"']

res24 = r.json().arrpop("riders", "$")
print(res24)  # >>> [None]

Node.js
Java-Sync
Go
C#

JSON objects also have their own commands:
>_ Redis CLI
Python

res25 = r.json().set(
    "bike:1", "$", {"model": "Deimos", "brand": "Ergonom", "price": 4972}
)
print(res25)  # >>> True

res26 = r.json().objlen("bike:1", "$")
print(res26)  # >>> [3]

res27 = r.json().objkeys("bike:1", "$")
print(res27)  # >>> [['model', 'brand', 'price']]

Node.js
Java-Sync
Go
C#
Format CLI output

The CLI has a raw output mode that lets you add formatting to the output from JSON.GET to make it more readable. To use this, run redis-cli with the --raw option and include formatting keywords such as INDENT, NEWLINE, and SPACE with JSON.GET:

$ redis-cli --raw
> JSON.GET obj INDENT "\t" NEWLINE "\n" SPACE " " $
[
	{
		"name": "Leonard Cohen",
		"lastSeen": 1478476800,
		"loggedOut": true
	}
]

Enable Redis JSON

Redis JSON is not available by default in the basic Redis server, so you should install Redis Stack or Redis Enterprise, both of which include JSON and other useful modules. See Install Redis Stack or Install Redis Enterprise for full installation instructions.
Limitation

A JSON value passed to a command can have a depth of up to 128. If you pass to a command a JSON value that contains an object or an array with a nesting level of more than 128, the command returns an error.
Further information


Here’s a **full set of Python scripts** to integrate **RedisJSON** into your application. These scripts cover **storing, retrieving, updating, searching, and deleting JSON data** using RedisJSON in Python.

---

### **1. Install Dependencies**
Ensure you have `redis` installed:
```bash
pip install redis
```

---

### **2. Configure Redis Connection**
Create a file called `redis_config.py`:
```python
import redis

# Connect to Redis
redis_client = redis.Redis(host='localhost', port=6379, decode_responses=True)

# Test the connection
if redis_client.ping():
    print("Connected to Redis successfully!")
```
Make sure **Redis is running** before executing this script.

---

### **3. Store JSON Data**
Create a file `store_json.py`:
```python
from redis_config import redis_client
import json

# Sample JSON data
user_data = {
    "id": 1001,
    "name": "Joshua",
    "age": 35,
    "skills": ["Python", "Redis", "Docker"]
}

# Store JSON object in Redis using RedisJSON
redis_client.execute_command("JSON.SET", "user:1001", "$", json.dumps(user_data))

print("JSON data stored successfully!")
```
✅ This stores the JSON object under the key `"user:1001"`.

---

### **4. Retrieve JSON Data**
Create a file `get_json.py`:
```python
from redis_config import redis_client
import json

# Retrieve entire JSON object
user_json = redis_client.execute_command("JSON.GET", "user:1001")

# Convert string back to JSON
user_data = json.loads(user_json)

print("Retrieved JSON Data:", json.dumps(user_data, indent=2))
```
✅ This script fetches the entire JSON document.

---

### **5. Retrieve Specific Fields**
Create a file `get_field.py`:
```python
from redis_config import redis_client
import json

# Retrieve only the "name" field
name_json = redis_client.execute_command("JSON.GET", "user:1001", "$.name")

# Convert response to JSON
name_data = json.loads(name_json)

print("User Name:", name_data[0])  # RedisJSON returns lists, so we access the first element
```
✅ This fetches only the `name` field.

---

### **6. Update JSON Data**
Create a file `update_json.py`:
```python
from redis_config import redis_client

# Update the user's age
redis_client.execute_command("JSON.SET", "user:1001", "$.age", "36")

# Append a new skill to the skills array
redis_client.execute_command("JSON.ARRAPPEND", "user:1001", "$.skills", '"AI Development"')

print("JSON data updated successfully!")
```
✅ This script **updates the age** and **appends a new skill**.

---

### **7. Delete JSON Fields**
Create a file `delete_field.py`:
```python
from redis_config import redis_client

# Delete the "age" field from the JSON object
redis_client.execute_command("JSON.DEL", "user:1001", "$.age")

print("Field deleted successfully!")
```
✅ This removes the `age` field.

---

### **8. Searching JSON Data (Using RediSearch)**
If you need **search functionality**, install RediSearch:
```bash
docker run -d --name redis-stack -p 6379:6379 redis/redis-stack
```
Now, create `search_json.py`:
```python
from redis_config import redis_client

# Create a search index for JSON fields
redis_client.execute_command("FT.CREATE", "idx:users",
                             "ON", "JSON",
                             "PREFIX", "1", "user:",
                             "SCHEMA", "$.name", "AS", "name", "TEXT",
                             "$.age", "AS", "age", "NUMERIC")

print("Search index created successfully!")

# Search for users by name
search_results = redis_client.execute_command("FT.SEARCH", "idx:users", "@name:Joshua")

print("Search Results:", search_results)
```
✅ This **indexes and searches JSON fields**.

---

### **9. Delete Entire JSON Object**
Create a file `delete_json.py`:
```python
from redis_config import redis_client

# Delete entire JSON object
redis_client.delete("user:1001")

print("JSON object deleted successfully!")
```
✅ This removes the entire JSON document.

---

### **How to Run the Scripts**
Run these in order:
```bash
python store_json.py
python get_json.py
python get_field.py
python update_json.py
python delete_field.py
python search_json.py
python delete_json.py
```

---

## **Final Notes**
🚀 **What This Setup Gives You:**
1. **Efficient JSON Storage** (No need to store raw strings).
2. **Field-Level Updates** (Modify specific fields without rewriting entire JSON).
3. **Search Capabilities** (If using **RediSearch**).
4. **Scalability** (Perfect for real-time applications).

Yes, **RedisJSON** can be used to manage **task lists** efficiently, allowing for structured storage, retrieval, and updates of task-related data. Here’s how you can structure **task lists** using RedisJSON:

---

### **1. Storing Task Lists in RedisJSON**
Each task list can be stored as a **JSON object**, with tasks being part of an **array**.

#### **Example: Storing a Task List**
```python
from redis import Redis

# Connect to Redis
redis_client = Redis(host='localhost', port=6379, decode_responses=True)

# Example Task List
task_list = {
    "title": "Project Tasks",
    "tasks": [
        {"id": 1, "task": "Research RedisJSON", "status": "pending"},
        {"id": 2, "task": "Set up Redis instance", "status": "in progress"},
        {"id": 3, "task": "Integrate Redis with Python", "status": "completed"}
    ]
}

# Store in RedisJSON
redis_client.execute_command("JSON.SET", "task_list:001", "$", str(task_list))
print("Task list stored in RedisJSON.")
```

---

### **2. Retrieving Task Lists**
You can fetch the **entire task list** or **specific fields**.

#### **Retrieve Full Task List**
```python
import json

# Fetch entire task list
task_list_json = redis_client.execute_command("JSON.GET", "task_list:001")
task_list = json.loads(task_list_json)

print("Retrieved Task List:", task_list)
```

#### **Retrieve Only Pending Tasks**
```python
pending_tasks = redis_client.execute_command("JSON.GET", "task_list:001", "$.tasks[?(@.status == 'pending')]")
print("Pending Tasks:", pending_tasks)
```

---

### **3. Adding a New Task to the List**
Tasks can be **appended** dynamically.

```python
new_task = {"id": 4, "task": "Write integration tests", "status": "pending"}

# Append new task to the array
redis_client.execute_command("JSON.ARRAPPEND", "task_list:001", "$.tasks", str(new_task))

print("New task added.")
```

---

### **4. Updating a Task Status**
Modify a specific task **without overwriting the entire list**.

```python
# Update status of task with id=2 to "completed"
redis_client.execute_command("JSON.SET", "task_list:001", "$.tasks[?(@.id == 2)].status", '"completed"')

print("Task updated successfully.")
```

---

### **5. Removing a Task**
You can **delete** a specific task by ID.

```python
# Remove the task with ID 3
redis_client.execute_command("JSON.DEL", "task_list:001", "$.tasks[?(@.id == 3)]")

print("Task removed.")
```

---

### **6. Searching for Tasks**
With **RediSearch**, you can **query tasks** efficiently.

```python
# Create a search index for tasks
redis_client.execute_command("FT.CREATE", "idx:tasks",
                             "ON", "JSON",
                             "PREFIX", "1", "task_list:",
                             "SCHEMA", "$.tasks[*].task", "AS", "task", "TEXT")

# Search for tasks containing "Redis"
search_results = redis_client.execute_command("FT.SEARCH", "idx:tasks", "@task:Redis")

print("Search Results:", search_results)
```

---

## **Why Use RedisJSON for Task Lists?**
✅ **Efficient Field-Level Updates** – Modify tasks without rewriting entire objects.  
✅ **Scalable** – Supports millions of tasks with fast read/write operations.  
✅ **Supports Queries** – Find pending tasks, overdue tasks, or completed tasks easily.  
✅ **Atomic Operations** – Safe concurrent access for multiple users.  

Yes, there are significant **differences in behavior** between **JSON files (`.json`)** and **JSON Lines files (`.jsonl`)**, particularly in how they store, read, and process data. Below is a breakdown of these differences and their implications when working with Redis.

---

## **🔹 JSON (`.json`) vs. JSONL (`.jsonl`)**
| Feature               | **JSON (`.json`)** | **JSON Lines (`.jsonl`)** |
|-----------------------|------------------|------------------|
| **Structure** | Single JSON object (dictionary, array, or nested objects) | Each line is a separate **JSON object** |
| **Format** | `{ "tasks": [{"id": 1, "name": "Task A"}, {"id": 2, "name": "Task B"}] }` | `{ "id": 1, "name": "Task A" }` (line 1) <br> `{ "id": 2, "name": "Task B" }` (line 2) |
| **Read & Write Efficiency** | Entire file must be loaded into memory | Can process **one line at a time** (streaming) |
| **Ideal for** | **Structured documents** (hierarchical data) | **Large, appendable logs or lists** (stream processing) |
| **Processing Speed** | **Slower** for appending/updating because it requires rewriting the full file | **Faster** for appending new records |
| **Searching Data** | Requires parsing the entire file | Supports **efficient line-by-line searching** |
| **Integration with RedisJSON** | Stores entire JSON under **one Redis key** | Stores each **line as a separate key** |

---

## **🔹 Redis Behavior with JSON vs JSONL**
If you are using **RedisJSON**, the behavior changes depending on whether you are working with JSON (`.json`) or JSON Lines (`.jsonl`).

### **✅ JSON (`.json`) in RedisJSON**
- **Stored as a single Redis key-value pair**.
- Best for **structured data that needs atomic updates**.
- **Example Redis Command to Store a JSON Object**:
  ```python
  redis_client.execute_command("JSON.SET", "tasks", "$", '{"tasks": [{"id": 1, "task": "Buy milk"}, {"id": 2, "task": "Write code"}]}')
  ```
- **Updating a Task**:
  ```python
  redis_client.execute_command("JSON.SET", "tasks", "$.tasks[?(@.id==1)].task", '"Buy coffee"')
  ```
- **Downside:** Every update requires modifying the entire JSON object.

---

### **✅ JSONL (`.jsonl`) in RedisJSON**
- **Each line is stored as a separate Redis key**.
- Best for **log-style data, streaming ingestion, or tasks needing independent updates**.
- **Example Redis Command to Store JSONL Entries**:
  ```python
  redis_client.execute_command("JSON.SET", "task:1", "$", '{"id": 1, "task": "Buy milk"}')
  redis_client.execute_command("JSON.SET", "task:2", "$", '{"id": 2, "task": "Write code"}')
  ```
- **Updating a Task**:
  ```python
  redis_client.execute_command("JSON.SET", "task:1", "$.task", '"Buy coffee"')
  ```
- **Downside:** Searching across multiple tasks requires **Redis Search (RediSearch)**.

---

## **🔹 When to Use JSON vs JSONL in Redis?**
| **Use Case**                        | **Best Format** | **Reason** |
|--------------------------------------|----------------|------------|
| **Updating parts of a large dataset** | **RedisJSON with `.json`** | Modify fields without rewriting the full file |
| **Appending new tasks or logs** | **RedisJSON with `.jsonl`** | Faster inserts without overwriting existing data |
| **Querying specific fields (searching tasks)** | **RedisJSON with `.json`** (or RediSearch for `.jsonl`) | Native RedisJSON supports filtering JSON data |
| **Processing large event logs** | **Redis Streams or `.jsonl`** | Efficient real-time event handling |

---

## **🔹 Final Recommendation**
- **Use `.json` in RedisJSON** when you need **structured task lists** and **field-level updates**.
- **Use `.jsonl` with separate Redis keys** when you need **high-speed streaming of tasks**, **append-only operations**, or **real-time log processing**.

Yes! **You can pull the values for your UI cards directly from RedisJSON** instead of reading from JSON files via WebSocket. This approach offers **real-time updates, reduced file I/O overhead, and direct data retrieval** from Redis.

---

## **🔹 How to Fetch Data for UI Cards from RedisJSON**
Instead of reading from a JSON file via WebSocket, your frontend can **query RedisJSON directly** via a **backend API (e.g., FastAPI, Flask, Node.js)**. This API will:
1. Fetch the required **card data from RedisJSON**.
2. Return the data to the **frontend UI**.
3. Optionally **push updates via WebSockets** if needed.

---

## **🔹 Step-by-Step Guide**
### **1️⃣ Store UI Card Data in RedisJSON**
Each UI card can be stored as a **separate Redis key**.

```python
from redis import Redis
import json

# Connect to Redis
redis_client = Redis(host='localhost', port=6379, decode_responses=True)

# Sample UI Card Data
card_data = {
    "id": 1,
    "title": "System 1 Analysis",
    "content": "This is the AI's System 1 thinking output.",
    "updated_at": "2025-03-08T12:00:00Z"
}

# Store in RedisJSON
redis_client.execute_command("JSON.SET", "card:1", "$", json.dumps(card_data))
print("Card data stored in RedisJSON.")
```

---

### **2️⃣ Create a Backend API (FastAPI Example)**
This backend will serve as the **middle layer between your UI and RedisJSON**.

```python
from fastapi import FastAPI
from redis import Redis
import json

app = FastAPI()
redis_client = Redis(host="localhost", port=6379, decode_responses=True)

@app.get("/cards/{card_id}")
async def get_card(card_id: int):
    card_json = redis_client.execute_command("JSON.GET", f"card:{card_id}")
    if card_json:
        return json.loads(card_json)
    return {"error": "Card not found"}
```
✅ **How It Works:**  
- When your UI calls **`/cards/1`**, the backend fetches **card:1** from RedisJSON and returns it.

---

### **3️⃣ Modify the UI to Fetch Data from API**
Instead of reading JSON files, your frontend can **fetch card data** dynamically.

#### **React Example**
```javascript
import { useEffect, useState } from "react";

function Card({ cardId }) {
  const [card, setCard] = useState(null);

  useEffect(() => {
    fetch(`http://localhost:8000/cards/${cardId}`)
      .then(response => response.json())
      .then(data => setCard(data));
  }, [cardId]);

  if (!card) return <p>Loading...</p>;

  return (
    <div className="card">
      <h2>{card.title}</h2>
      <p>{card.content}</p>
      <small>Last Updated: {card.updated_at}</small>
    </div>
  );
}

export default Card;
```

✅ **Now, your UI fetches live data from RedisJSON instead of a static file!**

---

## **🔹 BONUS: WebSockets for Real-Time UI Updates**
If you want **live updates** when RedisJSON changes, you can use **WebSockets**.

### **1️⃣ Add WebSocket Support to FastAPI**
Modify the backend to **push updates to the UI**.
```python
from fastapi import WebSocket, WebSocketDisconnect
import json

active_connections = []

@app.websocket("/ws/cards/{card_id}")
async def websocket_card(websocket: WebSocket, card_id: int):
    await websocket.accept()
    active_connections.append(websocket)

    try:
        while True:
            card_json = redis_client.execute_command("JSON.GET", f"card:{card_id}")
            if card_json:
                await websocket.send_text(card_json)
    except WebSocketDisconnect:
        active_connections.remove(websocket)
```

### **2️⃣ Modify React UI to Listen for Updates**
```javascript
import { useEffect, useState } from "react";

function LiveCard({ cardId }) {
  const [card, setCard] = useState(null);

  useEffect(() => {
    const socket = new WebSocket(`ws://localhost:8000/ws/cards/${cardId}`);
    socket.onmessage = (event) => {
      setCard(JSON.parse(event.data));
    };

    return () => socket.close();
  }, [cardId]);

  if (!card) return <p>Loading...</p>;

  return (
    <div className="card">
      <h2>{card.title}</h2>
      <p>{card.content}</p>
      <small>Last Updated: {card.updated_at}</small>
    </div>
  );
}

export default LiveCard;
```

✅ **Now, when RedisJSON updates, the UI automatically updates in real-time!**

---

## **🔹 Final Thoughts**
🚀 **Fetching card values directly from RedisJSON is faster and more efficient** than reading JSON files via WebSocket.  
💡 **Use WebSockets** only if real-time updates are needed; otherwise, a simple API call is sufficient.  
⚡ **Scaling?** Redis Streams + WebSockets ensure large-scale live updates without polling.

